require:
   earlgrey as eg
   loader-utils as utils

module.exports = source ->
   if this.cacheable: this.cacheable()
   let query    = utils.parseQuery(this.query)
   var result   = undefined
   try:
      var opts = {
         es5        = query.es5
         source-map = query.source-map
         runtime    = query.runtime
         parameters = {=}
      }
      delete query.es5
      delete query.source-map
      delete query.runtime
      for opt in query: opts.parameters[opt] = query[opt]
      result = eg.Generator(opts).generate(src) where
         src = eg.Source(source, this.resource-path)
   catch e: throw e

   this.callback(null, result.code, map) where map = ({=} & result.map) & {
      sources-content = {source}
   }
